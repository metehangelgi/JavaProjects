package code;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import given.ContactInfo;
import given.DefaultComparator;

/*
 * A phonebook class that should:
 * - Be efficiently (O(log n)) searchable by contact name
 * - Be efficiently (O(log n)) searchable by contact number
 * - Be searchable by e-mail (can be O(n)) 
 * 
 * The phonebook assumes that names and numbers will be unique
 * Extra exercise (not to be submitted): Think about how to remove this assumption
 * 
 * You need to use your own data structures to implement this
 * 
 * Hint: You need to implement a multi-map! 
 * 
 */
public class PhoneBook {

	/*
	 * ADD MORE FIELDS IF NEEDED
	 * 
	 */
	BinarySearchTree<String, ContactInfo> NameTree = new BinarySearchTree<String, ContactInfo>();
	BinarySearchTree<String, ContactInfo> NumberTree = new BinarySearchTree<String, ContactInfo>();
	int size;

	public PhoneBook() {
		NameTree.setComparator(new DefaultComparator<String>());
		NumberTree.setComparator(new DefaultComparator<String>(true)); // since this compares Integers comparator should
																		// reversed
		size = 0;
	}

	// Returns the number of contacts in the phone book
	public int size() {
		return size;
	}

	// Returns true if the phone book is empty, false otherwise
	public boolean isEmpty() {
		return size == 0;
	}
	// Adds a new contact or overwrites an existing contact with the given info
	// Args should be given in the order of e-mail and address which is handled for
	// you
	// Note that it can also be empty. If you do not want to update a field pass
	// null
	public void addContact(String name, String number, String... args) {
		int numArgs = args.length;
		String email = null;
		String address = null;

		/*
		 * Add stuff here if needed
		 */

		if (numArgs > 0)
			if (args[0] != null)
				email = args[0];
		if (numArgs > 1)
			if (args[1] != null)
				address = args[1];
		if (numArgs > 2)
			System.out.println("Ignoring extra arguments");

		/*
		 * TO BE IMPLEMENTED
		 * 
		 */
		ContactInfo contactInfo = new ContactInfo(name, number);
		contactInfo.setEmail(email);
		contactInfo.setAddress(address);
		NameTree.put(name, contactInfo);
		NumberTree.put(number, contactInfo);
		size++;
	}

	// Return the contact info with the given name
	// Return null if it does not exists
	// Should be O(log n)!
	public ContactInfo searchByName(String name) {
		return NameTree.get(name);
	}

	// Return the contact info with the given phone number
	// Return null if it does not exists
	// Should be O(log n)!
	public ContactInfo searchByPhone(String phoneNumber) {
		return NumberTree.get(phoneNumber);

	}

	// Return the contact info with the given e-mail
	// Return null if it does not exists
	// Can be O(n)
	public ContactInfo searchByEmail(String email) {
		if (isEmpty())
			return null;
		List<ContactInfo> contactList = getContacts();
		for (ContactInfo contactInfo : contactList) {
			if (contactInfo.getEmail() != null && contactInfo.getEmail().equals(email)) {
				return contactInfo;
			}
		}
		return null;

	}

	// Removes the contact with the given name
	// Returns true if there is a contact with the given name to delete, false
	// otherwise
	public boolean removeByName(String name) {
		if (isEmpty())
			return false;
		ContactInfo removeContact = NameTree.remove(name);
		if (removeContact == null) {
			return false;
		}
		NumberTree.remove(removeContact.getName());
		size--;
		return true;
	}

	// Removes the contact with the given name
	// Returns true if there is a contact with the given number to delete, false
	// otherwise
	public boolean removeByNumber(String phoneNumber) {
		if (isEmpty())
			return false;
		ContactInfo removeContact = NumberTree.remove(phoneNumber);
		if (removeContact == null) {
			return false;
		}
		NameTree.remove(removeContact.getName());
		size--;
		return true;
	}

	// Returns the number associated with the name
	public String getNumber(String name) {
		ContactInfo contact = NameTree.get(name);
		if (contact == null) {
			return null;
		}
		return contact.getNumber();
	}

	// Returns the name associated with the number
	public String getName(String number) {
		ContactInfo contact = NumberTree.get(number);
		if (contact == null) {
			return null;
		}
		return contact.getName();
	}

	// Update the email of the contact with the given name
	// Returns true if there is a contact with the given name to update, false
	// otherwise
	public boolean updateEmail(String name, String email) {
		ContactInfo contact = searchByName(name);
		if (contact == null) {
			return false;
		}
		contact.setEmail(email);
		return true;
	}

	// Update the address of the contact with the given name
	// Returns true if there is a contact with the given name to update, false
	// otherwise
	public boolean updateAddress(String name, String address) {

		ContactInfo contact = searchByName(name);
		if (contact == null) {
			return false;
		}
		contact.setAddress(address);
		return true;
	}

	// Returns a list containing the contacts in sorted order by name
	public List<ContactInfo> getContacts() {
		if (isEmpty())
			return null;
		List<BinaryTreeNode<String, ContactInfo>> nodeList = NameTree.getNodesInOrder();
		List<ContactInfo> contactList = new ArrayList<ContactInfo>();
		for (BinaryTreeNode<String, ContactInfo> node : nodeList) {
			contactList.add(node.getValue());
		}
		return contactList;
	}

	// Prints the contacts in sorted order by name
	public void printContacts() {
		for (ContactInfo contactInfo : getContacts()) {
			System.out.println(contactInfo);
		}
	}
}
