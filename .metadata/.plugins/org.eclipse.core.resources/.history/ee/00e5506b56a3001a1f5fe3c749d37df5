package code;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class UndirectedUnweightedGraph<V> extends BaseGraph<V> {

	/*
	 * YOU CAN ADD ANY FIELDS AND ADDITIONAL METHODS AS YOU LIKE
	 * 
	 */

	private HashMap<V, Set<Edge<V>>> adjacencyList;

	@Override
	public String toString() {
		String tmp = "Undirected Unweighted Graph";
		return tmp;
	}

	@Override
	public void insertVertex(V v) {
		// TODO Auto-generated method stub
		if (!this.adjacencyList.containsKey(v)) {
			this.adjacencyList.put(v, new HashSet<Edge<V>>());
		}

	}

	@Override
	public V removeVertex(V v) {
		// TODO Auto-generated method stub

		Set<Edge<V>> removedVertex = this.adjacencyList.remove(v);

		if (removedVertex != null) {
			for (V u : this.vertices()) {
				this.adjacencyList.get(u).remove(v);
			}
			return v;
		}
		return null;
	}

	@Override
	public boolean areAdjacent(V v1, V v2) {
		// TODO Auto-generated method stub
		Set<Edge<V>> Edges=this.adjacencyList.get(v1);
		
		for (Edge<V> edge : Edges) {
			if(this.adjacencyList.get(v2).contains(edge)) {
				return true;
			}
		}
		return false;
	}

	@Override
	public void insertEdge(V source, V target) {
		// TODO Auto-generated method stub
		if (!this.adjacencyList.containsKey(source)) {
			insertVertex(source);
		}
		if (!this.adjacencyList.containsKey(target)) {
			insertVertex(target);
		}
		this.adjacencyList.get(source).add(new Edge<V>(source,target,1));
		this.adjacencyList.get(target).add(new Edge<V>(source,target,1));
	}

	@Override
	public void insertEdge(V source, V target, float weight) {
		// TODO Auto-generated method stub
		insertEdge(source, target);
	}

	@Override
	public boolean removeEdge(V source, V target) {
		// TODO Auto-generated method stub
		if (!this.adjacencyList.containsKey(source) || !this.adjacencyList.containsKey(target)
				|| !this.adjacencyList.get(source).contains(target)
				|| !this.adjacencyList.get(target).contains(source)) {
			return false;
		}

		this.adjacencyList.get(source).remove(target);
		this.adjacencyList.get(target).remove(source);

		return true;
	}

	@Override
	public float getEdgeWeight(V source, V target) {
		// TODO Auto-generated method stub
		if (!this.adjacencyList.containsKey(source) || !this.adjacencyList.containsKey(target)
				|| !this.adjacencyList.get(source).contains(target)
				|| !this.adjacencyList.get(target).contains(source)) {
			return 0;
		}
		
		return 1;
	}

	@Override
	public int numVertices() {
		// TODO Auto-generated method stub
		return this.adjacencyList.size();
	}

	@Override
	public Iterable<V> vertices() {
		// TODO Auto-generated method stub
		return this.adjacencyList.keySet();
	}

	@Override
	public int numEdges() {
		// TODO Auto-generated method stub
		int sum=0;
		for (V vertex : vertices()) {
			sum+=this.adjacencyList.get(vertex).size();
		}
		sum = sum / 2;
		return sum;
	}

	@Override
	public boolean isDirected() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isWeighted() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int outDegree(V v) {
		// TODO Auto-generated method stub
		return this.adjacencyList.get(v).size();
	}

	@Override
	public int inDegree(V v) {
		// TODO Auto-generated method stub
		return this.adjacencyList.get(v).size();
	}

	@Override
	public Iterable<V> outgoingNeighbors(V v) {
		// TODO Auto-generated method stub
		return this.adjacencyList.get(v);
	}

	@Override
	public Iterable<V> incomingNeighbors(V v) {
		// TODO Auto-generated method stub
		return this.adjacencyList.get(v);
	}

}
